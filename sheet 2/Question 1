//Solved by felobateer

#include<iostream>
using namespace std;
typedef int type;//علشان اعرف اتحكم  بعد كده فى الداتا نوعها نص او ارقام 

struct node
{
	type data;
	node* next;// nodeبيشاور على ال pointer
};
typedef node* position;

class linkedlist
{
public:
	position head;
	position tail;
	int count;


	void makenull()
	{
		head = new node;
		head->next = NULL;
		tail =NULL;
		count = 0;
	}
	

	linkedlist()
	{
		makenull();
	}
	
	

	position first()
	{
		return head;
	}
	position end() {
		if(count == 0)return head;
		return tail;
	}
	// position end()
	// {
	// 	node* q = head;
	// 	while (q->next != NULL)
	// 		q = q->next;
	// 	return q;
	// }


	void insert(type value, position pos)//الصح انك تعمل داله تتاكد اذا كان العنصر موحود ولا لا بس انا معملتش
	{
		position newNode = new node;
		newNode->data = value;//  جديده فيها قيمه الرقمnode كده عملنا 
		if (pos == NULL)
			//cout << "not exist"; change
			pos = end();
		
		newNode->next = pos->next;
		pos->next = newNode;
		if (newNode->next==NULL)
			tail = newNode;
		count++;
	}

	position locate(type x, position  s, position e)
	{

		if ( s == NULL || e == NULL)
		{
			cout << "out of range\n";
			return NULL;
		}
		position temp = s;
		int index = 0;//just for print
		//change  temp != NULL &&  temp != e->next
		while (temp->next != NULL &&  temp->next != e)
		{
			if (temp->next->data == x) {
				cout << "the " << temp << " locate is ";
				cout << temp->next->data << endl;
				return temp;
			}
			index++;
			temp = temp->next;
		}
		cout << "Value " << x << " not found in the range.\n";
		return end();//NULL ادتنى  خطا
			
	}
	
	void Delete(position d)
	{
		if (d == NULL || d == end() )
		{
			cout << "error";
			return ; //change
		}

		if (d->next == tail)
			tail = d;
		position temp = d->next;
		d->next = temp->next;
		temp->next = NULL;
		delete temp;
		count--;
	}

	void printList() 
	{
		node* temp = head->next;
		cout<<"head -> ";
		while (temp != NULL) {
			cout << temp->data << " -> ";
			temp = temp->next;
		}
	 cout << "NULL" << endl;
	}
	
	int getLength() {
		
		return count;
	}	
	
};


int main() {


	linkedlist list;
	list.insert(10,list.first());
	list.insert(20,list.end());
	list.insert(40,list.first());
	list.insert(20,list.first());
	list.insert(60,list.first());
	list.insert(25,list.first());
	list.insert(30,list.first());

	cout<<"lenth is " << list.getLength() << endl;
	
	list.printList(); 
	cout << endl;
	cout << list.locate(30, list.first(), list.end()) << endl;
	cout << list.locate(50, list.first(), list.end()) << endl<<list.end()<<endl;
	list.Delete(list.first());
	list.printList();
	cout<<endl;
	return 0;
}
